<?php

// 元はCustomerFavoriteProductRepositoryに追記した内容です

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\FavoriteReview\Repository;

use Doctrine\ORM\QueryBuilder;
use Eccube\Entity\CustomerFavoriteProduct;
use Eccube\Repository\AbstractRepository;
// use Customize\Entity\FavoriteReview;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * FavoriteReviewRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FavoriteReviewRepository extends AbstractRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, CustomerFavoriteProduct::class);
    }

    /**
     * @param  \Eccube\Entity\Customer $Customer
     * @param $id
     *
     * @return QueryBuilder
     */
    public function getQueryBuilderByReviewId(\Eccube\Entity\Customer $Customer, $id)
    {
        $qb = $this->createQueryBuilder('cfp')
            ->select('cfp, p')
            ->innerJoin('cfp.Product', 'p')
            ->where('cfp.Customer = :Customer AND p.Status = 1')
            ->andWhere('cfp.id = :id')
            ->setParameter('Customer', $Customer)
            ->setParameter('id', $id);


        return $qb;
    }

    /**
     * @param $id
     *
     * @return QueryBuilder
     */
    public function getQueryBuilderByReviewIdOnly($id)
    {
        $qb = $this->createQueryBuilder('cfp')
            ->select('cfp, p')
            ->innerJoin('cfp.Product', 'p')
            ->andWhere('cfp.id = :id')
            ->setParameter('Customer', $Customer)
            ->setParameter('id', $id);


        return $qb;
    }


    /**
     * お気に入りのレビューを削除します.
     *
     * @param \Eccube\Entity\CustomerFavoriteProduct $CustomerFavoriteProduct
     */
    public function deleteReview($CustomerFavoriteProduct)
    {
        $CustomerFavoriteProduct->setComment(NULL)
        ->setPriority(NULL);

        $em = $this->getEntityManager();
        $em->persist($CustomerFavoriteProduct);
        $em->flush();
    }
}
